# Generated by Django 4.2.21 on 2025-05-20 12:04

from django.db import migrations


def set_date_end_when_missing(apps, schema_editor):
    """
    We unfortunately deployed a bug where some reviews were not receiving a
    date_end attribute, when they should have. This data migration should
    fix that.

    This function gets all reviews with no date_end and runs some logic
    inspired by the part of update_go() which should have provided a date_end.
    This way we do not mess with the Review.stage.
    """
    Review = apps.get_model("reviews", "Review")

    for review in Review.objects.filter(date_end__isnull=True):

        all_decisions = review.decision_set.count()
        closed_decisions = 0
        latest_date_decision = None

        for decision in review.decision_set.all():
            if decision.go != "":
                closed_decisions += 1
                if (
                    latest_date_decision is None
                    or latest_date_decision < decision.date_decision
                ):
                    latest_date_decision = decision.date_decision

        # review.date_end gets set to the final decision's date_decision,
        # which is how it should be set, for the reviews which were affected
        # by this bug

        if all_decisions == closed_decisions:
            review.date_end = latest_date_decision
            review.save()

        review.save()


class Migration(migrations.Migration):

    dependencies = [
        ("reviews", "0014_alter_decision_comments"),
    ]

    operations = [
        migrations.RunPython(
            set_date_end_when_missing, reverse_code=migrations.RunPython.noop
        ),
    ]
