********************
Internationalization
********************

The main language of this web application is Dutch, as it's aimed towards the mostly avid Dutch-speaking researchers of Utrecht University.
However, since October 2016, there is a full English translation available, initially compiled by `Anna Asbury`_.
Translations in other languages are welcome, of course.
Translations can be easily created using `python manage.py makemessages` and edited using e.g. `Poedit`_.

.. _Anna Asbury: http://www.annaasbury.com/
.. _Poedit: https://poedit.net/

Working with translations
=========================

This portal uses translations in a 'dutch in-template/code, translate to english' model, whichs brings with it some challenges. (Our other apps use a different, translation-key -> [english,dutch], setup to avoid most of them). 

Trimming whitespace
-------------------

In templates, :code:`{% blocktrans %}` tags are often used to translate larger amounts of texts. However, by default this tag preserves (excessive) whitespace naturally present in the templates. (From indentation, mostly).
This makes the ``msgid`` in the po files rather hard to read.

Thus, it is preferred to use the trimmed argument: :code:`{% blocktrans trimmed %}`. This will strip out any excessive whitespace.

In general: if you are working in a file that still contains non-trimmed blocktrans tags you should add the trimmed argument ASAP. This will also require you to fix the po file, but often this just boils down to making sure the automatic tools fix it correctly. (See below)

De-fuzzy-fying
--------------

When a translatable string is added/changed, :code:`python manage.py makemessages -a` (actually gettext under the hood) will try to match it to a similar existing string. In those cases, a ``#, fuzzy`` comment/tag will be added to the string. The same comment/tag will also be added to the metadata at the top of the po file.

If you only change a few strings, this process is likely to be correct. However, it tends to fail with larger changes (and is simply incorrect when adding new strings). 

Thus, it is very important that you do a text search for 'fuzzy' after working with translations. Verify that any translations tagged with fuzzy are correct, correct them if they are not and remove the fuzzy tag after. (If you leave it, weird stuff might happen).

Please also remember to remove the 'fuzzy' in the metadata at the top, it's a good canary-in-the-coal-mine. 

Cleanup on aisle seven
----------------------

Please remember to remove any unused translations at the bottom of the file; they will be commented out by :code:`python manage.py makemessages -a` if they are indeed unused. 

Their precence does no harm, but it can make the already large file even longer. 

*Header name named after Ty's consistent un-funny joke when seeing this in code-reviews, even though he also often forgets to do this step*

Merging translations
====================

Once messages have been generated with :code:`python manage.py makemessages -a`, you will often find that many line numbers and other fluff in your PO file have been changed, making any further changes very hard to merge back into the starting branch.

Before continuing, make all your changes to your feature branch and add all your translations. There's no point in merging translations multiple times, just do it once when the branch is ready to be merged.


Checking out both files
------------------

You should still be on the feature branch that you're preparing to merge back into a mainline branch, for this example we'll assume that branch is develop. We'll also assume your shell is in the directory containing django.po.

First, rename your django.po to feature.po::

  mv django.po feature.po

Then, collect the django.po file you wish to merge into and rename it as well::

  git checkout origin/develop -- django.po
  mv django.po develop.po

The double dash (--) indicates that all arguments that follow are filenames. As such, this will only checkout the django.po file from develop.


Using msgcat
------------

The tool we will be using is called msgcat, which concatenates message files. Install it from your repositories if it's not already on your system.

In its most basic usage, msgcat will combine all messages from the input PO files and print them to standard output::

  msgcat feature.po develop.po

We can redirect the standard output to a new file named django.po as follows::

  msgcat feature.po develop.po > django.po

If you have only added new translations in your feature branch, this should be sufficient, and you now have a django.po which is sufficiently merged.

However, if you have also changed existing translations, you will end up with message sections like the following::

  #: faqs/menus.py:26 feedback/models.py:20
  #: feedback/templates/feedback/feedback_list.html:22
  #: main/templates/base/menu.html:140
  #, fuzzy
  msgid "Feedback"
  msgstr ""
  "#-#-#-#-#  feature.po  #-#-#-#-#\n"
  "Feedback duplicate\n"
  "#-#-#-#-#  develop.po  #-#-#-#-#\n"
  "Feedback"

This happens because the msgstr exists in both PO files but is not an exact match. To resolve such a situation, it is usually easy enough to use the search feature of your IDE to find these conflicts and resolve them manually in the same manner as for fuzzy translations.

Though msgcat can also help us in this situation. If we are careful to specify our feature.po file first, the following option will always choose the translation from feature.po above develop.po::

  msgcat --use-first feature.po develop.po > django.po

This option is of course not possible if there are newer changes to translations in develop. These would be overwritten by the older translations in feature.po from when the feature branch branched off.

In the cases where both PO files contain changes you wish to keep, you can still manually select the correct translation from the output of msgcat. Although skillful use of msgat's :code:`--unique` and :code:`--more-than=1` options can save you the manual labour (see the manpage), the author's experience is that this rarely saves actual time spent on the merge.
